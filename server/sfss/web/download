#!/usr/bin/env perl

use strict;
use warnings;
use lib '/opt/sfss/lib';
use MIME::Base64;
use LWP::UserAgent;
use Data::Dumper;
use CGI;
use Common;
use Log::Log4perl qw(:easy);

Log::Log4perl::init($SFSS_LOGCONF);
my $log = Log::Log4perl->get_logger();

my $cgi          = new CGI;
my $access_token = $cgi->param('access_token') || '';
my $filename     = $cgi->param('filename') || '';

my $ghobj = github_checktoken($access_token);
$log->info("$ghobj->{user}{login} download file");
if (github_isvalid($ghobj)) {
  my $userdir     = "$SFSS_DATADIR/$ghobj->{user}{id}";
  my $b64filename = encode_base64($filename, '');
  if ($filename && -f "$userdir/$b64filename") {
    $log->info("$ghobj->{user}{login} download file $filename");
    print $cgi->header(
      -type       => 'application/octlet',
      -attachment => $filename
    );
    open(my $infh, "$userdir/$b64filename");
    sfss_decrypt_fh($infh, \*STDOUT, $SFSS_COMMON_SECRET.$ghobj->{user}{id});
    close($infh);
  }
  else {
    print $cgi->header;
    $log->warn("$ghobj->{user}{login} download file $filename not found");
    print "File '$filename' is not found.\n";
  }
}
else {
  print $cgi->header;
  $log->error("$ghobj->{user}{login} $ghobj->{message}");
  print "Failed to download file.\n";
}

# vim: sw=2 st=2 ts=2 et number si
